// Code generated by mockery v1.0.0
package mocks

import articles "github.com/xesina/golang-realworld/articles"
import mock "github.com/stretchr/testify/mock"

// ArticleRepository is an autogenerated mock type for the ArticleRepository type
type ArticleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *ArticleRepository) Create(user *articles.Article) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*articles.Article) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ArticleRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *ArticleRepository) Find(id uint) (*articles.Article, error) {
	ret := _m.Called(id)

	var r0 *articles.Article
	if rf, ok := ret.Get(0).(func(uint) *articles.Article); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*articles.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *ArticleRepository) Update(user *articles.Article) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*articles.Article) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
